#include <iostream>
#include <string.h>
#include <cstdlib>
#include <limits>

using namespace std;

class Usuario{
 public:
    int minutos_assistidos = 0;
 private:
    char nome_usuario[50];
    char CPF_Usuario[11];
    int n_user=0;
    int idade_usuario;

    public:
        void Teste_CPF(char cpf_teste[50],char CPF_Escrito[50]){        //TESTE DE CPF
            while(strcmp(CPF_Escrito,cpf_teste)==0){
                cout << "\n •CPF já cadastrado!!!" <<endl;
                cout << "\n > Digite o CPF: ";
                fflush(stdin);
                gets(CPF_Escrito);
            }
        }

        void Cadastra_Usuario(){        //CADASTRO DE USUÁRIO
            char Nome_Usuario_Dig[50];
            char CPF_Usuario_Dig[50], cpf_ant[50];
            int Idade_Usuario_Dig, t_user, r_user=0, n_usuario=1;

            n_usuario = n_usuario+1;
/*Nome U*/  cout << "\n > Digite o nome de usuário: ";
            fflush(stdin);
            gets(Nome_Usuario_Dig);
            strcpy(nome_usuario, Nome_Usuario_Dig);  //Copia o Nome_Usuario_Dig para nome_usuario

/*Idad U*/  cout << "\n > Digite a idade do usuário: ";
            cin >> Idade_Usuario_Dig;
            idade_usuario = Idade_Usuario_Dig;

/*CPF U*/   cout << "\n > Digite o CPF do usuário: ";
            fflush(stdin);
            gets(CPF_Usuario_Dig);                  //Pega o CPF do usuário
            cout << "CPF_Usuario(PRIVADO): " <<CPF_Usuario;
            cout << "CPF_Usuario(PUBLICO): " <<CPF_Usuario_Dig;

            Teste_CPF(CPF_Usuario_Dig,CPF_Usuario);  //Testa CPF se é igual a algum já registrado
            t_user = strlen(CPF_Usuario_Dig);

            for(int i=0;i<t_user;i++){               //Testa o CPF do usuário
                while((CPF_Usuario_Dig[i]!='0')&&(CPF_Usuario_Dig[i]!='1')&&(CPF_Usuario_Dig[i]!='2')&&(CPF_Usuario_Dig[i]!='3')&&(CPF_Usuario_Dig[i]!='4')&&(CPF_Usuario_Dig[i]!='5')&&(CPF_Usuario_Dig[i]!='6')&&(CPF_Usuario_Dig[i]!='7')&&(CPF_Usuario_Dig[i]!='8')&&(CPF_Usuario_Dig[i]!='9')&&(CPF_Usuario_Dig[i]!='-')&&(CPF_Usuario_Dig[i]!='.')&&(CPF_Usuario_Dig[i]!=' ')){
                    cout << "\n •CPF Escrito de forma incorreta, escreva novamente: ";
                    fflush(stdin);                   //Testa se tem letra no cpf e pede correção
                    gets(CPF_Usuario_Dig);
                }
            }

            for(int j=0;j<t_user;j++){              //Copia apenas os numeros do cpf digitado para a variavel privada
                if((CPF_Usuario_Dig[j]!='.')&&(CPF_Usuario_Dig[j]!='-')&&(CPF_Usuario_Dig[j]!=' ')){
                    CPF_Usuario[r_user] = CPF_Usuario_Dig[j];
                    r_user = r_user+1;
                }
                else{
                    CPF_Usuario[r_user] = CPF_Usuario_Dig[j + 1];
                }
            }
            n_user = n_user + n_usuario;
        }        //FIM CADASTRO DE USUÁRIO

        void Imprime_Usuario(){        //MOSTRAR USUÁRIO

            cout << " >> USUÁRIO: " << nome_usuario << endl;
            cout << " >> CPF: " << CPF_Usuario << endl;
            cout << " >> IDADE: " << idade_usuario << endl;
            //cout << " >> NÚMERO DE USUÁRIOS: " << n_user << endl;
        }

        void Cadastra_Usuario_Auto(char nome_usuario_auto[50],int idade_auto,char CPF_usuario_auto[11], int minutos_assistidos_auto){
            strcpy(nome_usuario, nome_usuario_auto);
            idade_usuario = idade_auto;
            strcpy(CPF_Usuario, CPF_usuario_auto);
            minutos_assistidos = minutos_assistidos_auto;
        }
        char* getNomeUsuario(){
            return nome_usuario;
        }

    void Pesquisar() {  ///
  /*      int opcao_pesquisa;
        cout << "\nPor qual dos seguintes itens deseja pesquisar?\n";
        cout << "(1) Usuários\n";
        cout << "(2) Autores\n";
        cout << "(3) Filmes\n";
        cout << "Opção: ";
        cin >> opcao_pesquisa;

        switch (opcao_pesquisa) {
            case 1:
                PesquisarUsuarios();
                break;
            case 2:
                {
                    Autor autor;
                    autor.PesquisarAutores();
                    break;
                }
            case 3:
                {
                    Filme filme;
                    filme.PesquisarFilmes();
                    break;
                }
            default:
                cout << "Opção inválida!\n";
        } */
    };

    void PesquisarUsuarios() {
        char nome_pesquisa[50];
        cout << "\nBuscar pelo nome de Usuário: ";
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cin.getline(nome_pesquisa, 50);

        // Lógica para pesquisar e exibir resultados
        // ...

        cout << "Resultados da pesquisa de usuários para '" << nome_pesquisa << "':\n";
        // Exibir resultados encontrados
        // ...
    }///
};  ///FIM CLASS USUÁRIO

class Autor{
 public:
    char nome_autor[50];
    int views = 0;  ///**
 private:
    char CPF_autor[11];
    float receita;
    float preco_por_view;  ///**

    public:
        void Cadastra_Autor(){      //CADASTRO AUTOR
            int t_autor=0, r=0;
            char CPF_Autor_dig[15];
            char nome_autor_digitado[50];
;
            cout << "\n > Digite o nome do autor do filme: ";   //Cadastra o nome do autor
            fflush(stdin);
            gets(nome_autor_digitado);
            strcpy(nome_autor, nome_autor_digitado);

            cout << "\n > Digite o CPF do autor do filme(Digite os 11 números): ";
            fflush(stdin);
            gets(CPF_Autor_dig);                   //Pega o CPF do autor
            t_autor=strlen(CPF_Autor_dig);

            for(int i=0; i<t_autor; i++){          //Testa o CPF do autor
                while((CPF_Autor_dig[i]!='0')&&(CPF_Autor_dig[i]!='1')&&(CPF_Autor_dig[i]!='2')&&(CPF_Autor_dig[i]!='3')&&(CPF_Autor_dig[i]!='4')&&(CPF_Autor_dig[i]!='5')&&(CPF_Autor_dig[i]!='6')&&(CPF_Autor_dig[i]!='7')&&(CPF_Autor_dig[i]!='8')&&(CPF_Autor_dig[i]!='9')&&(CPF_Autor_dig[i]!='-')&&(CPF_Autor_dig[i]!='.')&&(CPF_Autor_dig[i]!=' ')){
                    cout << "\n •CPF Escrito de forma incorreta, escreva novamente (lembre-se de digitar os 11 números)!\n";
                    cout << "> ";
                    fflush(stdin);                 //Testa se tem letra no cpf e pede correção
                    gets(CPF_Autor_dig);
                }
            }

            for(int j=0; j<15; j++){               //Copia apenas os números do cpf digitado para a variável privada
                if((CPF_Autor_dig[j]!='.')&&(CPF_Autor_dig[j]!='-')&&(CPF_Autor_dig[j]!=' ')){
                    CPF_autor[r]=CPF_Autor_dig[j];
                    r = r+1;
                }
                else{
                    CPF_autor[r]=CPF_Autor_dig[j+1];
                }
            }
        }

        void Imprime_Autor(){       //MOSTRA DADOS AUTOR
            int t_autor_final=0;

            cout << " >> AUTOR: " << nome_autor << endl;
            cout << " >> CPF: ";
            t_autor_final=strlen(CPF_autor);

            for(int i=0; i<t_autor_final; i++){
                cout << CPF_autor[i];

            }
            cout << "\n -------------------------------------\n" << endl;
        }

        void Cadastra_Autor_Auto(char _nome_autor_auto[50], char _CPF_autor_auto[11], float _receita_auto){      //CADASTRO AUTOMÁTICO DE AUTOR
            strcpy(this->nome_autor, _nome_autor_auto);
            strcpy(this->CPF_autor, _CPF_autor_auto);
            this->receita = _receita_auto;
        }

        void Calcula_Receita(){     ///*FAZ O CÁLCULO DE QUANTO AUTOR DEVE RECEBER COM VIEWS*
            float ganho_por_view = preco_por_view * views;
            cout << "O autor " << nome_autor << " recebeu R$ " << ganho_por_view << " pelos " << views << " views do filme." << endl;
            receita += ganho_por_view;
            //views = 0;
        }

    void PesquisarAutores() {  ///
        char nome_pesquisa[50];
        cout << "\nBuscar pelo nome de Autor: ";
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cin.getline(nome_pesquisa, 50);

        // Lógica para pesquisar e exibir resultados
        // ...

        cout << "Resultados da pesquisa de autores para '" << nome_pesquisa << "':\n";
        // Exibir resultados encontrados
        // ...
    }///
};  ///FIM CLASS AUTOR

class Filme : public Autor{
 public:
    Autor* autor;
    int views = 0;
 private:
    char nome_filme[100], genero[50];
    int faixa_etaria, duracao_filme;
    float preco_por_view;

    public:
        void Cadastra_Filme(){      //CADASTRO FILME
            char nome_filme_digitado[50];
            int faixa_etaria_digitada, duracao_filme_digitado;
            float preco_por_view_digitado;
            char genero_digitado[50];

            cout << "\n > Digite o nome do filme que deseja cadastrar: ";
                fflush(stdin);
                gets(nome_filme_digitado);
                strcpy(nome_filme,nome_filme_digitado);

            cout << "\n > Digite o gênero do filme: ";
                fflush(stdin);
                gets(genero_digitado);
                strcpy(genero,genero_digitado);

            cout << "\n > Digite a faixa etária do filme(Livre = 0 / 10 / 12 / 14 / 16 / 18): ";
            fflush(stdin);
            cin >> faixa_etaria_digitada;

            while((faixa_etaria_digitada!=0)&&(faixa_etaria_digitada!=10)&&(faixa_etaria_digitada!=12)&&(faixa_etaria_digitada!=14)&&(faixa_etaria_digitada!=16)&&(faixa_etaria_digitada!=18)){
                cout << "\n > Classificação indicativa inválida! Digite novamente: ";
                fflush(stdin);
                cin >> faixa_etaria_digitada;
            }
            faixa_etaria = faixa_etaria_digitada;

            cout << "\n > Digite a duração do filme em minutos: ";
            fflush(stdin);
            cin >> duracao_filme_digitado;
            duracao_filme = duracao_filme_digitado;


            cout<<"\n > Digite o preço que esse filme paga por vizualização ao autor: ";
            fflush(stdin);
            cin >> preco_por_view_digitado;
            preco_por_view=preco_por_view_digitado;
        }

        void Imprime_Filme(){       //INFORMAÇÕES FILME
            cout << " >> FILME: " << nome_filme << endl;
            cout << " >> GÊNERO: " << genero << endl;
            cout << " >> FAIXA ETÁRIA: " << faixa_etaria << endl;
            cout << " -------------------------------------" << endl;
        }

        void Associa_Autor_Auto(Autor* _z){     //ASSOCIAÇÃO AUTOMÁTICA AUTOR
            this->autor = _z;
            this->autor->Imprime_Autor();
        }

        void Cadastra_Filme_Auto(char nome_filme_auto[50], char genero_auto[50], int faixa_etaria_auto, float preco_por_view_auto, int views_auto, int p, int duracao_filme_auto){     //CADASTRO AUTOMÁTICO FILME
            strcpy(nome_filme, nome_filme_auto);
            strcpy(genero, genero_auto);
            faixa_etaria = faixa_etaria_auto;
            preco_por_view = preco_por_view_auto;
            views = views_auto;
            duracao_filme = duracao_filme_auto;

            Imprime_Filme();
        }

        char* getNomeFilme(){
          return nome_filme;
        }

    void PesquisarFilmes() {  ///
        char nome_pesquisa[100];
        cout << "\nBuscar pelo nome de Filme: ";
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cin.getline(nome_pesquisa, 100);

        // Lógica para pesquisar e exibir resultados
        // ...

        cout << "Resultados da pesquisa de filmes para '" << nome_pesquisa << "':\n";
        // Exibir resultados encontrados
        // ...
    }///
};  ///FIM CLASS FILME

/*
int main() //FALTA FAZER: MENU------RECEBIMENTO DE DINHEIRO DO AUTOR----- ------ -----
{
    Filme *x[2];   //NUMERO DE FILMES
    Usuario *y[2]; //NUMERO DE USUARIOS
    //x[0]=new Filme; //DECLARAÇÃO DE NOVO FILME
    y[0]=new Usuario; //DECLARAÇÃO DE NOVO USUARIO
    y[1]=new Usuario; //DECLARAÇÃO DE NOVO USUARIO
    //x[0]->Cadastra_Autor();//FUNÇÃO PRONTA DE CADASTRO DE NOME E CPF DO AUTOR
    //system("CLS"); //LIMPA TELA RETIRAR DO COMENTARIO PARA IMPLEMENTA-LA
    //x[0]->Cadastra_Filme(); //FUNÇÃO PRONTA DE CADASTRO DO NOME, FAIXA ETARIA E GENERO DO FILME
    //system("CLS"); //LIMPA TELA RETIRAR DO COMENTARIO PARA IMPLEMENTA-LA
    y[0]->Cadastra_Usuario(); //FUNÇÃO PRONTA DE CADASTRO DO NOME, CPF E IDADE DO USUARIO
    y[0]->Imprime_Usuario(); //FUNÇÃO PRONTA DE IMPRIMIR USUARIO (NOME,IDADE,CPF)
    y[1]->Cadastra_Usuario();
    y[1]->Imprime_Usuario();

    //system("CLS"); //LIMPA TELA RETIRAR DO COMENTARIO PARA IMPLEMENTA-LA
    //x[0]->Imprime_Filme(); //FUNÇÃO PRONTA DE IMPRIMIR FILME (NOME,GENERO,FAIXA ETARIA)
    //x[0]->Imprime_Autor(); //FUNÇÃO PRONTA DE IMPRIMIR AUTOR (NOME,CPF)
    //y[0]->Imprime_Usuario(); //FUNÇÃO PRONTA DE IMPRIMIR USUARIO (NOME,IDADE,CPF)
    cout<<"\n----------FIM DO PROGRAMA----------";
    return 0;
}
*/



int main(){
    system("color 9");
    setlocale(LC_ALL,"Portuguese");

    char inicia_gerenciador;
    int numero_de_usuarios=0, numero_de_filmes=0, numero_de_autores=0;
    int opcao=0, posicao_usuario=0, posicao_filme=0, posicao_autor=0, escolha=0,i=0, maior=0, posicao=0, temp=0, tempf=0, contautomatico=0;

    Filme *x[100];   //NÚMERO DE FILMES
    Usuario *y[11];  //NÚMERO DE USUÁRIOS
    Autor *z[100];   //NÚMERO DE AUTORES

    cout << "    ______________________________________" << endl;
    cout << "    |                                    |" << endl;
    cout << "    |       GERENCIADOR DE FILMES        |" << endl;
    cout << "    |____________________________________|" << endl;

    cout << "\n\n|   > APERTE QUALQUER TECLA PARA INICIAR <   |\n\n";
    cin >> inicia_gerenciador;
    system("CLS");

    //cout <<
    cout << "\n        |   > SEJA BEM VINDO(A)! <   |\n";

jumpstart:
    cout << "    ______________________________________" << endl;
    cout << "    |                                    |" << endl;
    cout << "    |           MENU PRINCIPAL           |" << endl;
    cout << "    |____________________________________|" << endl;
    cout << "\n  Insira uma das opções abaixo:\n" << endl;
    cout << "  [1] CADASTRO\n  [2] LISTAS\n  [3] PESQUISAR\n  [4] DADOS AUTOMÁTICOS\n  [5] ASSISTIR\n  [6] Sair" << endl;
    cout << "\nOpção: ";
    cin >> opcao;
    system("CLS");

    switch(opcao){
    case 1:  //OPÇÃO PARA CADASTROS
        escolha = 0;
jumpescolha1:
        cout << "  __________________" << endl;
        cout << "  |                |" << endl;
        cout << "  |  [1] CADASTRO  |" << endl;
        cout << "  |________________|" << endl;
        cout << "\n>O que deseja cadastrar?" << endl << "\n (1)Usuário\n (2)Autor\n (3)Filme\n (4)Voltar ao menu\n\nOpção: ";
        cin >> escolha;
        cout << "\n";

        if(escolha==1){
            y[posicao_usuario] = new Usuario; //DECLARAÇÃO DE NOVO USUARIO
            y[posicao_usuario]->Cadastra_Usuario();
            posicao_usuario++;

            cout << "\nUsuário cadastrado com sucesso!\n";
            system("pause");
            system("CLS");
            goto jumpstart;
        }  //fim escolha 1.1

        if(escolha==2){
            z[posicao_autor] = new Autor; //DECLARAÇÃO DE NOVO AUTOR
            z[posicao_autor]->Cadastra_Autor();
            posicao_autor++;
            cout << "\nAutor cadastrado com sucesso!\n";
            system("pause");
            system("CLS");
            goto jumpstart;
        }  //fim escolha 2.1

        if(escolha==3){
            x[posicao_filme] = new Filme; //DECLARAÇÃO DE NOVO FILME   !!!FALTA ASSOCIAR FILME A UM AUTOR!!!
            x[posicao_filme]->Cadastra_Filme();
            posicao_filme++;
            cout << "\nFilme cadastrado com sucesso!\n";
            system("pause");
            system("CLS");
            goto jumpstart;
        }  //fim escolha 3.1

        if (escolha==4){
            system("CLS");
            goto jumpstart;
        }

        if((escolha<1)||(escolha>4)){
            cout << "\n•ERRO! OPÇÃO INVÁLIDA!\n";
            system("pause");
            system("CLS");
            goto jumpescolha1;
        }  //fim escolha 0.1 'defalt'
    break;


    case 2:  //OPÇÃO PARA LISTAS
        escolha = 0;
jumpescolha2:
        cout << "  ________________" << endl;
        cout << "  |              |" << endl;
        cout << "  |  [2] LISTAS  |" << endl;
        cout << "  |______________|" << endl;
        cout << "\n>Qual das seguintes listas deseja visualizar?" << endl << "\n (1)Usuários\n (2)Autores\n (3)Filmes\n (4)Voltar ao menu\n\nOpção: ";
        cin >> escolha;
        cout << "\n\n";

        if(escolha==1){
            system("CLS");
            int a[posicao_usuario];
            char b[50];
            string c[posicao_usuario], tp;

            for(int i=0; i<posicao_usuario; i++){
                a[i]=y[i]->minutos_assistidos;
                strcpy(b, y[i]->getNomeUsuario());
                c[i]=b;
            }

            for(int i=0; i<posicao_usuario; i++) {
                for(int j=i+1; j<posicao_usuario; j++){
                    if(a[j] < a[i]) {
                        temp = a[i];
                        a[i] = a[j];
                        a[j] = temp;
                        tp = c[i];
                        c[i] = c[j];
                        c[j] = tp;
                    }
                }
            }

            if(posicao_usuario > 0){
                cout << "Lista de usuários\n\n";

                for(int i=0; i<posicao_usuario; i++){
                    cout << i+1 << "º usuário // Nome: "<<c[i]<<" // Minutos assistidos: " << a[i] << endl;
                }

                cout << endl;
            }
            else{
                cout << "\n > SEM USUÁRIOS REGISTRADOS!\n\n";
            }

            system("pause");
            system("CLS");
        }  //fim escolha 1.2

        if(escolha==2){
            system("CLS");
            cout << "Lista de Nomes de Autores\n\n";
            for(int i=0; i<posicao_autor; i++){
                cout << i+1 << "º Autor // Nome Autor: " << z[i]->nome_autor << endl;
            }
            cout << endl;

            system("pause");
            system("CLS");
        }  //fim escolha 2.2

        if(escolha==3){
            system("CLS");
            int a[posicao_filme];
            char b[50];
            string c[posicao_filme],tp;
                for(int i=0; i<posicao_filme; i++){
                    a[i] = x[i]->views;
                    strcpy(b, x[i]->getNomeFilme());
                    c[i] = b;
                }

                for(int i=0; i<posicao_filme; i++){
                    for(int j=i+1; j<posicao_filme; j++){
                        if(a[j]>a[i]){
                            temp = a[i];
                            a[i] = a[j];
                            a[j] = temp;
                            tp = c[i];
                            c[i] = c[j];
                            c[j] = tp;
                        }
                    }
                }

            if(posicao_filme > 0){
                cout << "Lista de Nomes e Visualizações de filmes\n\n";
                for(int i=0; i<posicao_filme; i++){
                    cout << i+1 << "º Filme // Nome Filme: "<< c[i] <<" // Views: " << a[i] << endl;
                }
                cout << endl;
            }
            else{
                cout << "\n > NENHUM FILME REGISTRADO\n\n";
            }
            system("pause");
            system("CLS");
        }  //fim escolha 3.2

        if (escolha==4){
            system("CLS");
            goto jumpstart;
        }

        if((escolha<1)||(escolha>4)){
            cout << "•ERRO! OPÇÃO INVÁLIDA!\n";
            system("pause");
            system("CLS");
            goto jumpescolha1;
        }  //fim escolha 0.2 'defalt'
    break;


    case 3:  //OPÇÃO DE PESQUISAR
        cout << "  ___________________" << endl;
        cout << "  |                 |" << endl;
        cout << "  |  [3] PESQUISAR  |" << endl;
        cout << "  |_________________|\n" << endl;

            {
                Usuario usuario;
                usuario.Pesquisar();
                break;
            }
        /*

        INSERIR MÉTODO

        */


    break;


    case 4:  //DECLARAÇÃO AUTOMÁTICA DE DADOS
        if(contautomatico==0){
        cout << "\nINJETANDO DADOS...\n\n";

        y[posicao_usuario]=new Usuario; //DECLARAÇÃO DE NOVO USUÁRIO 1
        y[posicao_usuario]->Cadastra_Usuario_Auto("Pablo",15,"45447775000", 353);
        posicao_usuario++;
        y[posicao_usuario]=new Usuario; //DECLARAÇÃO DE NOVO USUÁRIO 2
        y[posicao_usuario]->Cadastra_Usuario_Auto("Jurandir",15,"78238678005", 351);
        posicao_usuario++;
        y[posicao_usuario]=new Usuario; //DECLARAÇÃO DE NOVO USUÁRIO 3
        y[posicao_usuario]->Cadastra_Usuario_Auto("Edilêne",72,"86467344049", 214);
        posicao_usuario++;
        y[posicao_usuario]=new Usuario; //DECLARAÇÃO DE NOVO USUÁRIO 4
        y[posicao_usuario]->Cadastra_Usuario_Auto("Enzo",5,"51924583070", 618);
        posicao_usuario++;
        y[posicao_usuario]=new Usuario; //DECLARAÇÃO DE NOVO USUÁRIO 5
        y[posicao_usuario]->Cadastra_Usuario_Auto("Luiz",25,"28894175065", 351);
        posicao_usuario++;


        //DECLARANDO AUTOR E SEU FILME 1
        z[posicao_autor]=new Autor; //DECLARAÇÃO DE NOVO AUTOR 1
        x[posicao_filme]=new Filme;
        z[posicao_autor]->Cadastra_Autor_Auto("Dave Webb","00000000000", 592.2);
        x[posicao_filme]->Cadastra_Filme_Auto("Trust Her","Romance",12, 0.4, 846, posicao_autor, 89);
        x[posicao_filme]->Associa_Autor_Auto(z[posicao_autor]);
        posicao_autor++;
        posicao_filme++;

        //DECLARANDO AUTOR E SEU FILME 2
        z[posicao_autor]=new Autor; //DECLARAÇÃO DE NOVO AUTOR 2
        z[posicao_autor]->Cadastra_Autor_Auto("Edgar Murray","00000000001", 8680.5);
        x[posicao_filme]=new Filme;
        x[posicao_filme]->Cadastra_Filme_Auto("Dinos And Chickens","Infantil",0, 0.9, 9645, posicao_autor, 103);
        x[posicao_filme]->Associa_Autor_Auto(z[posicao_autor]);
        posicao_autor++;
        posicao_filme++;

        //DECLARANDO AUTOR E SEU FILME 3
        z[posicao_autor]=new Autor; //DECLARAÇÃO DE NOVO AUTOR 3
        z[posicao_autor]->Cadastra_Autor_Auto("Alexander Philo Ortiz","00000000002", 1057.8);
        x[posicao_filme]=new Filme;
        x[posicao_filme]->Cadastra_Filme_Auto("Thief Program","Comédia",10, 0.6, 1763, posicao_autor, 125);
        x[posicao_filme]->Associa_Autor_Auto(z[posicao_autor]);
        posicao_autor++;
        posicao_filme++;

        //DECLARANDO AUTOR E SEU FILME 4
        z[posicao_autor]=new Autor; //DECLARAÇÃO DE NOVO AUTOR 4
        z[posicao_autor]->Cadastra_Autor_Auto("Julia Glenn","00000000003", 2072.7);
        x[posicao_filme]=new Filme;
        x[posicao_filme]->Cadastra_Filme_Auto("Men Behind The Door","Horror",18, 0.7, 2961, posicao_autor, 127);
        x[posicao_filme]->Associa_Autor_Auto(z[posicao_autor]);
        posicao_autor++;
        posicao_filme++;

        //DECLARANDO AUTOR E SEU FILME 5
        z[posicao_autor]=new Autor; //DECLARAÇÃO DE NOVO AUTOR 5
        z[posicao_autor]->Cadastra_Autor_Auto("Jamison Solomon Osian","00000000004", 873.0);
        x[posicao_filme]=new Filme;
        x[posicao_filme]->Cadastra_Filme_Auto("Monuments Of The Fallen","Sci-Fi",16, 0.6, 1455, posicao_autor, 99);
        x[posicao_filme]->Associa_Autor_Auto(z[posicao_autor]);
        posicao_autor++;
        posicao_filme++;


        cout << "\nDADOS INJETADOS COM SUCESSO!\n\n";
        }
        if(contautomatico!=0){
            cout<<"\n•OS DADOS JÁ FORAM INJETADOS ANTERIORMENTE!\n\n";
        }
        contautomatico++;
        system("pause");
        system("CLS");
        goto jumpstart;
    break;


    case 5:  //PROCURAR FILMES
        escolha=0;
jumpescolha5:
        cout << "  __________________" << endl;
        cout << "  |                |" << endl;
        cout << "  |  [5] ASSISTIR  |" << endl;
        cout << "  |________________|" << endl;
        cout << "\nProcure pelo o que deseja assistir! \n>Pesquise por:\n\n (1)Título\n (2)Gênero\n (3)Autor\n (4)Voltar ao menu \n\nOpção: ";
        cin >> escolha;
        cout << "\n";

        if(escolha==1){

            /*

            INSERIR MÉTODO

            */

            cout << "\nVizualização registrada com sucesso!\n";
            system("pause");
            system("CLS");
        }
        if(escolha==2){

            /*

            INSERIR MÉTODO

            */

            cout << "\nVizualização registrada com sucesso!\n";
            system("pause");
            system("CLS");
        }
        if(escolha==3){

            /*

            INSERIR MÉTODO

            */

            cout << "\nVizualização registrada com sucesso!\n";
            system("pause");
            system("CLS");
        }

        if (escolha==4){
            system("CLS");
            goto jumpstart;
        }

        if((escolha<1)||(escolha>4)){
            cout << "•ERRO! OPÇÃO INVÁLIDA!";
            system("pause");
            system("CLS");
            goto jumpescolha5;
        }
    break;


    case 6:  //OPÇÃO PARA TERMINAR O PROGRAMA
        cout << "  •__________________________________" << endl;
        cout << "  |                                |" << endl;
        cout << "  |    FIM GERENCIADOR DE FILMES   |" << endl;
        cout << "  |________________________________|" << endl;
        return 0;
    break;


    default:  //ERRO NAS OPÇÕES
        cout << "\n•ERRO! OPÇÃO NÃO EXISTENTE!\n\nDigite uma nova opção.\n";
        std::cin.clear();
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        system("pause");
        system("CLS");
        goto jumpstart;
    break;
    }

    //LOOP PARA VOLTAR AO MENU
    system("pause");
    system("CLS");
    goto jumpstart;

    return 0;
}